name: Build varfile (clone ncbind + tp_stub, debug logs)

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x64, x86 ]
      fail-fast: false

    steps:
      - name: Checkout varfile (no submodules)
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Print workspace info
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "PWD: $PWD"
          Write-Host "Listing repo root:"
          Get-ChildItem -Force $env:GITHUB_WORKSPACE | ForEach-Object { Write-Host $_.Name }

      - name: Determine parent folder and clone dependencies
        shell: pwsh
        run: |
          $cwd = $env:GITHUB_WORKSPACE
          if (-not $cwd) { Write-Host "GITHUB_WORKSPACE not set"; exit 1 }
          $parent = Split-Path -Parent $cwd
          Write-Host "Parent folder: $parent"
          $repos = @{
            "ncbind" = "https://github.com/wamsoft/ncbind.git"
            "tp_stub" = "https://github.com/wamsoft/tp_stub.git"
          }
          foreach ($name in $repos.Keys) {
            $url = $repos[$name]
            $dest = Join-Path $parent $name
            Write-Host "`n--- Preparing $name at $dest ---"
            if (Test-Path $dest) {
              Write-Host "Removing existing $dest"
              Remove-Item -Recurse -Force $dest
            }
            Write-Host "Cloning $url -> $dest"
            git clone $url $dest
            if ($LASTEXITCODE -ne 0) { Write-Host "git clone failed for $name"; exit 1 }
            Write-Host "Initializing submodules (if any) for $name"
            git -C $dest submodule update --init --recursive
            if ($LASTEXITCODE -ne 0) { Write-Host "submodule init failed for $name (continuing)"; }
            Write-Host "$name ready."
          }
          Write-Host "`nParent directory contents (sanity):"
          Get-ChildItem -Path $parent -Force | ForEach-Object { Write-Host $_.Name }

      - name: Print Visual Studio + CMake info
        shell: pwsh
        run: |
          cmake --version
          Write-Host "Sample Visual Studio installs:"
          Get-ChildItem 'C:\Program Files (x86)\Microsoft Visual Studio\' -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.Name }

      - name: Configure CMake for architecture
        shell: pwsh
        run: |
          $arch = '${{ matrix.arch }}'
          Write-Host "Configuring for architecture: $arch"
          if ($arch -eq 'x64') {
            cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON -Wdev
          } else {
            cmake -S . -B build -G "Visual Studio 17 2022" -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON -Wdev
          }

      - name: Build (capture log)
        shell: pwsh
        run: |
          $arch = '${{ matrix.arch }}'
          $log = "build_${arch}.log"
          Write-Host "Building ($arch) and writing to $log"
          cmake --build build --config Release --parallel 2>&1 | Tee-Object -FilePath $log -Encoding utf8
          $exit = $LASTEXITCODE
          if ($exit -ne 0) {
            Write-Host "Build exited with code $exit"
            Write-Host "`n===== Last 200 lines of $log =====`n"
            Get-Content $log -Tail 200 | ForEach-Object { Write-Host $_ }
            exit $exit
          } else {
            Write-Host "Build succeeded."
          }

      - name: Collect built DLLs (if any)
        shell: pwsh
        run: |
          $arch = '${{ matrix.arch }}'
          $out = "$PWD\artifact\$arch"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Get-ChildItem -Path "$PWD\build" -Filter *.dll -Recurse -ErrorAction SilentlyContinue |
            ForEach-Object { Copy-Item $_.FullName -Destination $out -Force }
          Get-ChildItem -Path "$PWD\build\Release" -Filter *.dll -Recurse -ErrorAction SilentlyContinue |
            ForEach-Object { Copy-Item $_.FullName -Destination $out -Force }

      - name: Upload logs & DLLs
        uses: actions/upload-artifact@v4
        with:
          name: build-debug-${{ matrix.arch }}
          path: |
            build_${{ matrix.arch }}.log
            artifact/${{ matrix.arch }}
