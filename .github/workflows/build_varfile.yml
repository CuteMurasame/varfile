name: Build varfile (with ncbind clone, debug logs)

on:
  workflow_dispatch:
  push:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ x64, x86 ]
      fail-fast: false

    steps:
      - name: Checkout (no submodules)
        uses: actions/checkout@v4
        # ncbind is expected as a sibling directory (../ncbind), so we will clone it manually.

      - name: Print workspace info
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "PWD: $PWD"
          Get-ChildItem -Force | ForEach-Object { Write-Host $_.Name }

      - name: Clone ncbind into parent folder (required by CMake)
        shell: pwsh
        run: |
          $ncbindUrl = 'https://github.com/wamsoft/ncbind.git'
          # compute target path: parent of current repo checkout
          $parent = Join-Path $PWD '..'
          $dest = Join-Path $parent 'ncbind'
          Write-Host "Cloning ncbind into $dest"
          if (Test-Path $dest) {
            Write-Host "Removing existing $dest"
            Remove-Item -Recurse -Force $dest
          }
          git clone $ncbindUrl $dest
          # initialise submodules inside ncbind if any
          if (Test-Path $dest) {
            Write-Host "Initialising submodules in ncbind (if present)"
            git -C $dest submodule update --init --recursive
          } else {
            Write-Host "ncbind clone failed or dest missing"
            exit 1
          }
          Write-Host "ncbind cloned."

      - name: Print parent dir contents (sanity)
        shell: pwsh
        run: |
          Write-Host "`nParent dir listing:"
          Get-ChildItem -Path (Join-Path $PWD '..') -Force | ForEach-Object { Write-Host $_.Name }

      - name: Configure CMake (PowerShell conditional)
        shell: pwsh
        run: |
          $arch = '${{ matrix.arch }}'
          Write-Host "Configuring for architecture: $arch"
          if ($arch -eq 'x64') {
            cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -Wdev
          } else {
            cmake -S . -B build -G "Visual Studio 17 2022" -A Win32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -Wdev
          }

      - name: Build (capture log)
        shell: pwsh
        run: |
          $arch = '${{ matrix.arch }}'
          $log = "build_${arch}.log"
          Write-Host "Building ($arch) and writing to $log"
          cmake --build build --config Release --parallel 2>&1 | Tee-Object -FilePath $log -Encoding utf8
          $exit = $LASTEXITCODE
          if ($exit -ne 0) {
            Write-Host "Build exited with code $exit"
            Write-Host "`n===== Last 200 lines of $log =====`n"
            Get-Content $log -Tail 200 | ForEach-Object { Write-Host $_ }
            exit $exit
          } else {
            Write-Host "Build succeeded."
          }

      - name: Collect built DLLs (if any)
        shell: pwsh
        run: |
          $arch = '${{ matrix.arch }}'
          $out = "$PWD\artifact\$arch"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          Get-ChildItem -Path "$PWD\build" -Filter *.dll -Recurse -ErrorAction SilentlyContinue |
            ForEach-Object { Copy-Item $_.FullName -Destination $out -Force }
          Get-ChildItem -Path "$PWD\build\Release" -Filter *.dll -Recurse -ErrorAction SilentlyContinue |
            ForEach-Object { Copy-Item $_.FullName -Destination $out -Force }

      - name: Upload logs & DLLs
        uses: actions/upload-artifact@v4
        with:
          name: build-debug-${{ matrix.arch }}
          path: |
            build_${{ matrix.arch }}.log
            artifact/${{ matrix.arch }}
